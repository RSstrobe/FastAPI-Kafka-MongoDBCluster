version: '3.9'

services:
  postgres_auth:
    container_name: postgres_auth
    image: postgres:${POSTGRES_AUTH_VERSION}
    hostname: postgres_auth
    restart: always
    env_file: .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
    volumes:
      - auth_db_data:/var/lib/postgres/data
    networks:
      - auth_network

  auth:
    container_name: auth
    env_file: .env
    restart: on-failure
    build: auth
    networks:
      - auth_network
    depends_on:
      - postgres_auth

  redis_auth:
    container_name: redis_auth
    hostname: redis_auth
    image: redis:latest
    env_file: .env
    restart: always
    volumes:
      - /redis_auth/dаta:/root/redis
      - /redis_auth/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_DATABASES: ${AUTH_REDIS_DATABASES}
    networks:
      - auth_network
    depends_on:
      - postgres_auth
      - auth

  db:
    container_name: postgres
    image: postgres:13.4
    restart: always
    env_file: .env
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
     - network_project

  backend:
    container_name: backend
    env_file: .env
    volumes:
      - static_data:/opt/app/static
      - media_data:/opt/app/media
    build: ./app
    networks:
     - network_project
     - auth_network
    depends_on:
      - db

  fastapi:
    container_name: movies
    env_file: .env
    restart: unless-stopped
    build: movies
    networks:
     - network_project
     - auth_network
    depends_on:
      - db

  redis:
    container_name: redis
    image: redis:latest
    env_file: .env
    restart: always
    volumes:
      - /redis/dаta:/root/redis
      - /redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DATABASES: ${REDIS_DATABASES}
    networks:
     - network_project
    depends_on:
      - db
      - backend
      - fastapi
      - elastic

  nginx:
    container_name: nginx
    image: nginx:1.19.2
    env_file: .env
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./data:/data/:ro
      - static_data:/app/static
      - media_data:/app/media
    networks:
      - network_project
      - auth_network
    depends_on:
      - backend
      - fastapi

  elastic:
    container_name: elastic
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin=http://localhost:8080
    env_file: .env
    networks:
     - network_project
    depends_on:
      - backend

  etl:
    container_name: etl
    build: ./etl
    env_file: .env
    networks:
     - network_project
    depends_on:
      - db
      - backend
      - nginx
      - elastic

  auth_jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - '6831:6831/udp'
      - '16686:16686'
    networks:
      - auth_network
      - network_project

volumes:
  db_data:
  static_data:
  media_data:
  auth_db_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:

networks:
  network_project:
    driver: bridge
  auth_network:
    driver: bridge
  kafka_network:
    driver: bridge
